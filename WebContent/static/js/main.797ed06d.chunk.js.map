{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","kmsNodes","kmsEdges","ijkNodes","ijkEdges","nodes","edges","srcAndTarget","selected","targetSelected","sourceSelected","handleIJK","bind","assertThisInitialized","handleKMS","onTargetSelect","onSourceSelect","_this2","console","log","fetch","then","response","json","result","apts","map","item","setState","option","label","_this3","defaultOptionS","defaultOptionT","opt","graph","events","select","event","react_default","a","createElement","align","display","className","onClick","dist_default","options","onChange","value","placeholder","lib_default","layout","hierarchical","color","style","height","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.797ed06d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Graph from \"react-graph-vis\";\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    //never modify state directly\n    this.state = {\n      kmsNodes: [],\n      kmsEdges: [],\n      ijkNodes: [],\n      ijkEdges: [],\n      nodes:[],\n      edges:[],\n      srcAndTarget:[],\n      selected: '',\n      targetSelected:'',\n      sourceSelected:''\n    };\n\n    this.handleIJK = this.handleIJK.bind(this);\n    this.handleKMS = this.handleKMS.bind(this);\n    this.onTargetSelect = this.onTargetSelect.bind(this);\n    this.onSourceSelect = this.onSourceSelect.bind(this);\n  }\n\n  componentDidMount(){\n  console.log(\"Tada\");\n  fetch('http://localhost:8080/GraphyMakeGraphFace/graph/vertices')\n  .then(response => response.json())\n  .then(result => {\n    const apts = result.map(item => {\n      return item;\n    })\n    this.setState({\n      kmsNodes: apts,\n    })\n  });\n\n  fetch('http://localhost:8080/GraphyMakeGraphFace/graph/edges')\n  .then(response => response.json())\n  .then(result => {\n    const apts = result.map(item => {\n      return item;\n    })\n    this.setState({\n      kmsEdges: apts,\n    })\n  });\n\n  fetch('./ijkEdges.json')\n  .then(response => response.json())\n  .then(result => {\n    const apts = result.map(item => {\n      return item;\n    })\n    this.setState({\n      ijkEdges: apts,\n    })\n  });\n\n  fetch('./ijkNodes.json')\n  .then(response => response.json())\n  .then(result => {\n    const apts = result.map(item => {\n      return item;\n    })\n    this.setState({\n      ijkNodes: apts,\n    })\n  });\n\n  fetch('./srcAndTarget.json')\n  .then(response => response.json())\n  .then(result => {\n    const apts = result.map(item => {\n      return item;\n    })\n    this.setState({\n      srcAndTarget: apts,\n    })\n  });\n}\n\nhandleKMS(){\n  this.setState({\n    edges: this.state.kmsEdges,\n    nodes: this.state.kmsNodes\n  })\n}\n\nhandleIJK(){\n  console.log('Source: '+ this.state.sourceSelected);\n  console.log('Target: '+ this.state.targetSelected);\n  this.setState({\n    edges: this.state.ijkEdges,\n    nodes: this.state.ijkNodes\n  })\n}\n\nonSourceSelect (option) {\n//  console.log('Your Source ', option.label)\n  this.setState({sourceSelected: option.label})\n}\nonTargetSelect (option) {\n//  console.log('Your Target', option.label)\n  this.setState({targetSelected: option.label})\n}\n\nrender() {\nconst defaultOptionS= this.state.sourceSelected\nconst defaultOptionT= this.state.targetSelected\nconst placeHolderValueS = typeof this.state.sourceSelected === 'string' ? this.state.sourceSelected : this.state.sourceSelected.label\nconst placeHolderValueT = typeof this.state.targetSelected === 'string' ? this.state.targetSelected : this.state.targetSelected.label\nconst opt = this.state.srcAndTarget;\n\n  const graph = {\n    // nodes:this.state.ijkNodes,\n    // edges:this.state.ijkEdges\n\n    nodes:this.state.nodes,\n    edges:this.state.edges\n  };\n\n  const options = {\n  layout: {\n    hierarchical: false\n  },\n  edges: {\n    color: \"#000000\"\n  }\n};\n\nconst events = {\n  select: function(event) {\n    var { nodes, edges } = event;\n    console.log(\"Selected nodes:\");\n    console.log(nodes);\n    console.log(\"Selected edges:\");\n    console.log(edges);\n  }\n};\n  return (\n    <div>\n      <h1 align =\"center\">Kruskal MST</h1>\n      <div display = \"inline\">\n      <button className =\"button\"  onClick={() => this.handleKMS()}>KMS</button>\n      <Dropdown options={opt} onChange={this.onSourceSelect} value={defaultOptionS} placeholder=\"Source\" />\n      <Dropdown options={opt} onChange={this.onTargetSelect} value={defaultOptionT} placeholder=\"Target\" />\n      <button className =\"button\"  onClick={() => this.handleIJK()}>Shortest Path</button>\n      </div>\n      <Graph graph={graph} options={options} events={events} style={{ height: \"1000px\" }} />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}